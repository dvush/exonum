// This file is generated by rust-protobuf 2.1.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Block {
    // message fields
    pub proposer_id: u32,
    pub height: u64,
    pub tx_count: u32,
    pub prev_hash: ::protobuf::SingularPtrField<super::helpers::Hash>,
    pub tx_hash: ::protobuf::SingularPtrField<super::helpers::Hash>,
    pub state_hash: ::protobuf::SingularPtrField<super::helpers::Hash>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    // uint32 proposer_id = 1;

    pub fn clear_proposer_id(&mut self) {
        self.proposer_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_proposer_id(&mut self, v: u32) {
        self.proposer_id = v;
    }

    pub fn get_proposer_id(&self) -> u32 {
        self.proposer_id
    }

    // uint64 height = 2;

    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }

    pub fn get_height(&self) -> u64 {
        self.height
    }

    // uint32 tx_count = 3;

    pub fn clear_tx_count(&mut self) {
        self.tx_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_count(&mut self, v: u32) {
        self.tx_count = v;
    }

    pub fn get_tx_count(&self) -> u32 {
        self.tx_count
    }

    // .Hash prev_hash = 4;

    pub fn clear_prev_hash(&mut self) {
        self.prev_hash.clear();
    }

    pub fn has_prev_hash(&self) -> bool {
        self.prev_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prev_hash(&mut self, v: super::helpers::Hash) {
        self.prev_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prev_hash(&mut self) -> &mut super::helpers::Hash {
        if self.prev_hash.is_none() {
            self.prev_hash.set_default();
        }
        self.prev_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_prev_hash(&mut self) -> super::helpers::Hash {
        self.prev_hash.take().unwrap_or_else(|| super::helpers::Hash::new())
    }

    pub fn get_prev_hash(&self) -> &super::helpers::Hash {
        self.prev_hash.as_ref().unwrap_or_else(|| super::helpers::Hash::default_instance())
    }

    // .Hash tx_hash = 5;

    pub fn clear_tx_hash(&mut self) {
        self.tx_hash.clear();
    }

    pub fn has_tx_hash(&self) -> bool {
        self.tx_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: super::helpers::Hash) {
        self.tx_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut super::helpers::Hash {
        if self.tx_hash.is_none() {
            self.tx_hash.set_default();
        }
        self.tx_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> super::helpers::Hash {
        self.tx_hash.take().unwrap_or_else(|| super::helpers::Hash::new())
    }

    pub fn get_tx_hash(&self) -> &super::helpers::Hash {
        self.tx_hash.as_ref().unwrap_or_else(|| super::helpers::Hash::default_instance())
    }

    // .Hash state_hash = 6;

    pub fn clear_state_hash(&mut self) {
        self.state_hash.clear();
    }

    pub fn has_state_hash(&self) -> bool {
        self.state_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state_hash(&mut self, v: super::helpers::Hash) {
        self.state_hash = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state_hash(&mut self) -> &mut super::helpers::Hash {
        if self.state_hash.is_none() {
            self.state_hash.set_default();
        }
        self.state_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_state_hash(&mut self) -> super::helpers::Hash {
        self.state_hash.take().unwrap_or_else(|| super::helpers::Hash::new())
    }

    pub fn get_state_hash(&self) -> &super::helpers::Hash {
        self.state_hash.as_ref().unwrap_or_else(|| super::helpers::Hash::default_instance())
    }
}

impl ::protobuf::Message for Block {
    fn is_initialized(&self) -> bool {
        for v in &self.prev_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tx_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.state_hash {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.proposer_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tx_count = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.prev_hash)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_hash)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.state_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.proposer_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.proposer_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_count != 0 {
            my_size += ::protobuf::rt::value_size(3, self.tx_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.prev_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tx_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.state_hash.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.proposer_id != 0 {
            os.write_uint32(1, self.proposer_id)?;
        }
        if self.height != 0 {
            os.write_uint64(2, self.height)?;
        }
        if self.tx_count != 0 {
            os.write_uint32(3, self.tx_count)?;
        }
        if let Some(ref v) = self.prev_hash.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tx_hash.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.state_hash.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Block {
        Block::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "proposer_id",
                    |m: &Block| { &m.proposer_id },
                    |m: &mut Block| { &mut m.proposer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "height",
                    |m: &Block| { &m.height },
                    |m: &mut Block| { &mut m.height },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "tx_count",
                    |m: &Block| { &m.tx_count },
                    |m: &mut Block| { &mut m.tx_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::helpers::Hash>>(
                    "prev_hash",
                    |m: &Block| { &m.prev_hash },
                    |m: &mut Block| { &mut m.prev_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::helpers::Hash>>(
                    "tx_hash",
                    |m: &Block| { &m.tx_hash },
                    |m: &mut Block| { &mut m.tx_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::helpers::Hash>>(
                    "state_hash",
                    |m: &Block| { &m.state_hash },
                    |m: &mut Block| { &mut m.state_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Block>(
                    "Block",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Block {
        static mut instance: ::protobuf::lazy::Lazy<Block> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Block,
        };
        unsafe {
            instance.get(Block::new)
        }
    }
}

impl ::protobuf::Clear for Block {
    fn clear(&mut self) {
        self.clear_proposer_id();
        self.clear_height();
        self.clear_tx_count();
        self.clear_prev_hash();
        self.clear_tx_hash();
        self.clear_state_hash();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10blockchain.proto\x1a\rhelpers.proto\"\xc5\x01\n\x05Block\x12\x1f\n\
    \x0bproposer_id\x18\x01\x20\x01(\rR\nproposerId\x12\x16\n\x06height\x18\
    \x02\x20\x01(\x04R\x06height\x12\x19\n\x08tx_count\x18\x03\x20\x01(\rR\
    \x07txCount\x12\"\n\tprev_hash\x18\x04\x20\x01(\x0b2\x05.HashR\x08prevHa\
    sh\x12\x1e\n\x07tx_hash\x18\x05\x20\x01(\x0b2\x05.HashR\x06txHash\x12$\n\
    \nstate_hash\x18\x06\x20\x01(\x0b2\x05.HashR\tstateHashb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
